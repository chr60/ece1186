#    -*- mode: org -*-

* Introduction
** Purpose
This subsection should accomplish the following:
- Delineate the purpose of the particular SRS
- Specify the intended audience for the SRS
** Scope
This subsection should
- Identify the software product(s) to be produced by name (for example, Host DBMS, Report Generator etc.)
- Explain what the software product(s) will, and, if necessary, will not do
- Describe the application of the software being specified, including relevant benefits, objectives, and goals
- Be consistent with similar statements in higher-level specifications (for example, the system requirement specification), if they exist
** Definitions
This subsection should provide the definitions of all terms, acronyms, and abbreviations required to interpret
properly the SRS. This information may be provided by reference to one or more appendixes in the SRS or
by reference to other documents.
** References
This subsection should
- Provide a complete list of all documents referenced elsewhere in the SRS
- Identify each document by title, report number (if applicable), date, and publishing organization
- Specify the sources from which the references can be obtained
- This information may be provided by reference to an appendix or to another document.
** Overview
This subsection should
- Describe what the rest of the SRS contains
- Explain how the SRS is organized
* Overall description
** Perspective
This subsection of the SRS should put the product into perspective with other related products. If the product
is independent and totally self-contained, it should be so stated here. If the SRS defines a product that is a
component of a larger system, as frequently occurs, then this subsection should relate the requirements
of that larger system to functionality of the software and should identify interfaces between that system and
the software.
A block diagram showing the major components of the larger system, interconnections, and external inter-
faces can be helpful.
*** System Interfaces
This should list each system interface and identify the functionality of the software to accomplish the system
requirement and the interface description to match the system.
*** User Interfaces
This should specify the following:

The logical characteristics of each intelface between the software product and its users. This
includes those configuration characteristics (e.g., required screen formats, page or window layouts,
content of any reports or menus, or availability of programmable function keys) necessary to accom-
plish the software requirements.

All the aspects of optimizing the interface with the person who must use the system. This may simply
comprise a list of do's and don'ts on how the system will appear to the user. One example may be a
requirement for the option of long or short error messages. Like all others, these requirements
should be verifiable, for example, "a clerk typist grade 4 can do function X in Z min after 1 h of
training" rather than "a typist can do function X." (This may also be specified in the Software Sys-
tem Attributes under a section titled Ease of Use.) 
*** Hardware Interfaces
This should specify the logical characteristics of each interface between the software product and the hardware 
components of the system. This includes configuration characteristics (number of ports, instruction
sets, etc.) It also covers such matters as what devices are to be supported, how they are to be supported, and
protocols. For example, terminal support may specify full screen support as opposed to line by line.
*** Software Interfaces
This should specify the use of other required software products (for example, a data management system, an
operating system, or a mathematical package), and interfaces with other application systems (for example,
the linkage between an accounts receivable system and a general ledger system). For each required software
product, the following should be provided:
- Name
- Mnemonic
- Specification number
- Version number
- Source

For each interface, the following should be provided:
Discussion of the purpose of the interfacing software as related to this software product.
Definition of the interface in terms of message content and format. It is not necessary to detail any
well-documented interface, but a reference to the document defining the interface is required.
*** Communication Interface
This should specify the various interfaces to communications such as local network protocols, etc.
*** Memory Constraint
This should specify any applicable characteristics and limits on primary and secondary memory.
*** Operations
This should specify the normal and special operations required by the user such as
- Data processing support functions
- Backup and recovery operations
- The various modes of operations in the user organization; for example user-initiated operations
- Periods of interactive operations and periods of unattended operations

NOTE-This is sometimes specified as part of the User Interfaces section.
*** Site Adaptation requirements
This could
- Define the requirements for any data or initialization sequences that are specific to a given site, mission, or operational mode, for example, grid values, safety limits, etc.
- Specify the site or mission-related features that should be modified to adapt the software to a particular installation
** Functions
This subsection of the SRS should provide a summary of the major functions that the software will perform.
For example, an SRS for an accounting program may use this part to address customer account maintenance,
customer statement, and invoice preparation without mentioning the vast amount of detail that each of those
functions requires.
Sometimes the function summary that is necessary for this part can be taken directly from the section of the
higher level specification (if one exists) that allocates particular functions to the software product. Note that
for the sake of clarity:
- The functions should be organized in a way that makes the list of functions understandable to the
customer or to anyone else reading the document for the first time.
- Textual or graphical methods can be used to show the different functions and their relationships.
Such a diagram is not intended to show a design of a product but simply shows the logical relation-
ships among variables.
** User Characteristics
This subsection of the SRS should describe those general characteristics of the intended users of the product
including educational level, experience, and technical expertise. It should not be used to state specific
requirements but rather should provide the reasons why certain specific requirements are later specified in
section 3 of the SRS.
** Constraints
*** Regulatory policies
*** Hardware limitations (for example, signal timing requirements)
*** Interfaces to other applications
*** Parallel operation
*** Audit functions
*** Control functions
*** Higher-order language requirements
*** Signal handshake protocols (for example, XON-XOFF, ACK-NACK)
*** Reliability requirements
*** Criticality of the application
*** Safety and security considerations
** Assumptions and Dependencies
This subsection of the SRS should list each of the factors that affect the requirements stated in the SRS.
These factors are not design constraints on the software but are, rather, any changes to them that can affect
the requirements in the SRS. For example, an assumption may be that a specific operating system will be
available on the hardware designated for the software product. If, in fact, the operating system is not avail-
able, the SRS would then have to change accordingly.
* Specific Requirements
This section of the SRS should contain all the software requirements to a level of detail sufficient to enable
designers to design a system to satisfy those requirements, and testers to test that the system satisfies those
requirements. Throughout this section, every stated requirement should be externally perceivable by users,
operators, or other external systems. These requirements should include at a minimum a description of every
input (stimulus) into the system, every output (response) from the system and all functions performed by the
system in response to an input or in support of an output. As this is often the largest and most important part
of the SRS, the following principles apply:
- Specific requirements should be stated in conformance with all the characteristics described in 4.3 of this recommended practice.
- Specific requirements should be cross-referenced to earlier documents that relate.
- All requirements should be uniquely identifiable.
- Careful attention should be given to organizing the requirements to maximize readability.
** External Interfaces
This should be a detailed description of all inputs into and outputs from the software system. It should com-
plement the interface descriptions in 5.2 and should not repeat information there.
*** Interface A
**** Name
**** Description
**** Source/Destination of input/output
**** Valid range, accuracy, and or tolerance
**** Units of measure
**** Timing
**** Relationships to other inputs/outputs
**** Screen formats/organization
**** Window formats/organization
**** Data formats
**** Command formats
**** End messages
** Functions
Functional requirements should define the fundamental actions that must take place in the software in
accepting and processing the inputs and in processing and generating the outputs. These are generally listed
as "shall" statements starting with The system shall ...

It may be appropriate to partition the functional requirements into subfunctions or subprocesses. This does
not imply that the software design will also be partitioned that way.
*** Function A
**** Validity checks on inputs
**** Exact sequence of operations
**** Responses to abnormal situations
***** Overflow
***** Communication facilitites
***** Error handling and recovery
**** Effect of parameters
**** Relationship of output to inputs
***** Input/Output sequences
***** Formulas for input to output conversion
** Performance Requirements
This subsection should specify both the static and the dynamic numerical requirements placed on the soft-
ware or on human interaction with the software as a whole. Static numerical requirements may include:

Static numerical requirements are sometimes identified under a separate section entitled capacity.
Dynamic numerical requirements may include, for example, the numbers of transactions and tasks and the
amount of data to be processed within certain time periods for both normal and peak workload conditions.
All of these requirements should be stated in measurable terms.

NOTE-Numerical limits applied to one specific function are normally specified as part of the processing subparagraph
description of that function.
*** Number of terminals to be supported
*** Number of simultaneous users to be supported
*** Amount and type of information to be handled
** Logical Database Requirements
This should specify the logical requirements for any information that is to be placed into a database. This
may include:
*** Types of information used by various functions
*** Frequency of use
*** Accessing capabilities
*** Data entries and their relationships
*** Integrity constraints
*** Data retention requirements
** Design Constraints
This should specify design constraints that can be imposed by other standards, hardware limitations, etc.
*** Standards Compliance
For example, this could specify the requirement for software to trace processing activity. Such traces are
needed for some applications to meet minimum regulatory or financial standards. An audit trace requirement
may, for example, state that all changes to a payroll database must be recorded in a trace file with before and
after values.
**** Report format
**** Data naming
**** Accounting procedures
**** Audit tracing
** Software system attributes
There are a number of attributes of software that can serve as requirements. It is important that required
attributes be specified so that their achievement can be objectively verified. The following items provide a
partial list of examples.
*** Reliability
This should specify the factors required to establish the required reliability of the software system at time of
delivery.
*** Availability
This should specify the factors required to guarantee a defined availability level for the entire system such as
checkpoint, recovery, and restart.
*** Security
This should specify the factors that would protect the software from accidental or malicious access, use,
modification, destruction, or disclosure. Specific requirements in this area could include the need to
a) Utilize certain cryptographical techniques
b) Keep specific log or history data sets
c) Assign certain functions to different modules
d) Restrict communications between some areas of the program
e) Check data integrity for critical variables
*** Maintainability
This should specify attributes of software that relate to the ease of maintenance of the software itself. There
may be some requirement for certain modularity, interfaces, complexity, etc. Requirements should not be
placed here just because they are thought to be good design practices.
*** Portability
This should specify attributes of software that relate to the ease of porting the software to other host
machines and/or operating systems. This may include
- Percentage of components with host-dependent code
- Percentage of code that is host dependent
- Use of a proven portable language
- Use of a particular compiler or language subset
- Use of a particular operating system
** Organizing the specific requirements
For anything but trivial systems the detailed requirements tend to be extensive. For this reason, it is recom-
mended that careful consideration be given to organizing these in a manner optimal for understanding. There
is no one optimal organization for all systems. Different classes of systems lend themselves to different
organizations of requirements in section 3 of the SRS. Some of these organizations are described in the fol-
lowing subclauses.
*** System mode
Some systems behave quite differently depending on the mode of operation. For example, a control system
may have different sets of functions depending on its mode: training, normal, or emergency. When organiz-
ing this section by mode, use the outline shown in A.l or A.2 of annex A. The choice depends on whether
interfaces and performance are dependent on mode.
*** User class
Some systems provide different sets of functions to different classes of users. For example, an elevator con-
trol system presents different capabilities to passengers, maintenance workers, and fire fighters. When orga-
nizing this section by user class, use the outline shown in A.3 in annex A.
*** Objects
Objects are real-world entities that have a counterpart within the system. For example, in a patient
monitoring system, objects include patients, sensors, nurses, rooms, physicians, medicines, etc. Associated
with each object is a set of attributes (of that object) and functions (performed by that object). These func-
tions are also called services, methods, or processes. When organizing this section by object, use the outline
shown in A.4 in annex A. Note that sets of objects may share attributes and services. These are grouped
together as classes.
*** Feature
A feature is an externally desired service by the system that may require a sequence of inputs to effect the
desired result. For example, in a telephone system, features include local call, call forwarding, and confer-
ence call. Each feature is generally described in a sequence of stimulus-response pairs. When organizing this
section by feature, use the outline shown in AS in annex A.
*** Stimulus
Some systems can be best organized by describing their functions in terms of stimuli. For example, the func-
tions of an automatic aircraft landing system may be organized into sections for loss of power, wind shear,
sudden change in roll, vertical velocity excessive, etc. When organizing this section by stimulus, use the out-
line shown in A.6 in annex A.
*** Response
Some systems can be best organized by describing all the functions in support of the generation of a
response. For example, the functions of a personnel system may be organized into sections corresponding to
all functions associated with generating paychecks, all functions associated with generating a current list of
employees, etc. Use A.6 in annex A (with all occurrences of stimulus replaced with response).
*** Functional Hierarchy
When none of the above organizational schemes prove helpful, the overall functionality can be organized
into a hierarchy of functions organized by either common inputs, common outputs, or common internal
dataaccess. Data flow diagrams and data dictionaries can be used to show the relationships between
and among the functions and data. When organizing this section by functional hierarchy, use the outline in
A.7 in annex A.
** Additional Comments
Whenever a new SRS is contemplated, more than one of the organizational techniques given in 5.3.7.7 may
be appropriate. In such cases, organize the specific requirements for multiple hierarchies tailored to the spe-
cific needs of the system under specification. For example, see A.8 in annex A for an organization combining
user class and feature. Any additional requirements may be put in a separate section at the end of the SRS.
There are many notations, methods, and automated support tools available to aid in the documentation of
requirements. For the most part, their usefulness is a function of organization. For example, when organizing
by mode, finite state machines or state charts may prove helpful; when organizing by object, object-oriented
anamis may prove helpful; when organizing by feature, stimulus-response sequences may prove helpful;
when organizing by functional hierarchy, data flow diagrams and data dictionaries may prove helpful.
In any of the outlines given in A.1-A.8, those sections called "Functional Requirement i" may be described
in native language (e.g., English), in pseudocode, in a system definition language, or in four subsections
titled: Introduction, Inputs, Processing, Outputs.
* Appendices
