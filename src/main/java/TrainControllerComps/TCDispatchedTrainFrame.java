package TrainControllerComps;

import java.awt.List;
import java.util.HashMap;
import java.util.LinkedList;
import javax.swing.ListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * This class is responsible for displaying all the dispatched trains to the user, 
 * and allow them to open multiple Train Controllers for selected trains. 
 * 
 * This class collaborates with the Train Controller class. 
 * 
 * @author Andrew Lendacky
 */
public class TCDispatchedTrainFrame extends javax.swing.JFrame {

    /**
     * HashMap used to store the dispatched trains by its unique ID.
     */
    private HashMap<String, TestTrain> dispatchedTrains;
    
    /**
     * A list of trains that the user selected to open a Train Controller for. 
     */
    LinkedList<String> selectedTrains; 
    
    /**
     * Constructor for creating a TCDispatchedFrame object. 
     * This constructor does not set the dispatchedTrains or the selectedTrains fields. 
     * 
     */
    public TCDispatchedTrainFrame() {
        initComponents();     
    }
    
    /**
     * Constructor for creating a TCDispatchedFrame object with a specific HashMap. 
     * This HashMap should be passed from the Train Controller class.
     * 
     * @param dispatchedTrains HashMap corresponding to the dispatched trains.
     */
    public TCDispatchedTrainFrame(HashMap<String, TestTrain> dispatchedTrains) {
        initComponents();
        
        this.dispatchedTrains = dispatchedTrains;
        this.selectedTrains = new LinkedList<String>(); 
        this.refreshUI();
    }
    
    /**
     * Refreshes the UI by adding the dispatched trains from the HashMap to the JList object embedded in 
     * the panel. 
     * 
     */
    private void refreshUI(){
    
        String[] keys = new String[this.dispatchedTrains.keySet().size()];
        int counter = 0; 
        // loop through each key in the hashmap
        for (String key : this.dispatchedTrains.keySet()){
        
            keys[counter] = key; // add it to an array
            counter++; 
        }
        
        this.dispatchedTrainsList.setListData(keys); // add the names of the train to the JList
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dispatchedTrainsPanel = new javax.swing.JScrollPane();
        dispatchedTrainsList = new javax.swing.JList<>();
        titleLabel = new javax.swing.JLabel();
        uiSeparatorOne = new javax.swing.JSeparator();
        selectAllButton = new javax.swing.JButton();
        deselectAllButton = new javax.swing.JButton();
        openSelectedButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dispatchedTrainsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Train 1", "Train 2", "Train 3", "Train 4", "Train 5", "Train 6", "Train 7", "Train 8", "Train 9", "Train 10" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        dispatchedTrainsList.setToolTipText("List of dispatched trains.");
        dispatchedTrainsPanel.setViewportView(dispatchedTrainsList);

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        titleLabel.setText("Dispatched Trains");

        selectAllButton.setText("Select All");
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        deselectAllButton.setText("Deselect All");
        deselectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllButtonActionPerformed(evt);
            }
        });

        openSelectedButton.setText("Open Selected");
        openSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSelectedTrains(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleLabel)
                .addGap(89, 89, 89))
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dispatchedTrainsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addComponent(uiSeparatorOne))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deselectAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openSelectedButton)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addComponent(dispatchedTrainsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uiSeparatorOne, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAllButton)
                    .addComponent(deselectAllButton)
                    .addComponent(openSelectedButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Selects all the dispatched trains from the dispatchedTrainsList. 
     * 
     * @param evt the sender of the event, i.e., the 'Select All' button.
     */
    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectAllButtonActionPerformed

    /**
     * Deselects all the trains that are selected in the dispatchedTrainsList. 
     * 
     * @param evt the sender of the event, i.e., the 'Deselect All' button
     */
    private void deselectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectAllButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deselectAllButtonActionPerformed

    /**
     * Creates a Train Controller object for each of the trains that were selected by the user. 
     * 
     * @param evt the sender of the event, i.e., the 'Open Selected' button.
     */
    private void openSelectedTrains(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSelectedTrains
        
        TestTrain train; 
        // get each of the trains that were selected
        for (String trainId : this.dispatchedTrainsList.getSelectedValuesList()){
        
            train = this.dispatchedTrains.get(trainId); // get train from hash
            TrainController newTC = new TrainController(train); // open the train controller
            newTC.setVisible(true);
            newTC.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        }   
    }//GEN-LAST:event_openSelectedTrains

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TCDispatchedTrainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TCDispatchedTrainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TCDispatchedTrainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TCDispatchedTrainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TCDispatchedTrainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deselectAllButton;
    private javax.swing.JList<String> dispatchedTrainsList;
    private javax.swing.JScrollPane dispatchedTrainsPanel;
    private javax.swing.JButton openSelectedButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JSeparator uiSeparatorOne;
    // End of variables declaration//GEN-END:variables
}
